.TH "std::tr1" 3 "Tue Jun 4 2019" "Context-Free Grammars" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::tr1
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBgtest_internal\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBtuple\fP"
.br
.ti -1c
.RI "class \fBtuple<>\fP"
.br
.ti -1c
.RI "struct \fBtuple_element\fP"
.br
.ti -1c
.RI "struct \fBtuple_size\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_0_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_10_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_1_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_2_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_3_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_4_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_5_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_6_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_7_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_8_TUPLE_(T) >\fP"
.br
.ti -1c
.RI "struct \fBtuple_size< GTEST_9_TUPLE_(T) >\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<GTEST_1_TYPENAMES_(T) > class \fBGTEST_1_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_2_TYPENAMES_(T) > class \fBGTEST_2_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_3_TYPENAMES_(T) > class \fBGTEST_3_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_4_TYPENAMES_(T) > class \fBGTEST_4_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_5_TYPENAMES_(T) > class \fBGTEST_5_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_6_TYPENAMES_(T) > class \fBGTEST_6_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_7_TYPENAMES_(T) > class \fBGTEST_7_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_8_TYPENAMES_(T) > class \fBGTEST_8_TUPLE_\fP (T)"
.br
.ti -1c
.RI "template<GTEST_9_TYPENAMES_(T) > class \fBGTEST_9_TUPLE_\fP (T)"
.br
.ti -1c
.RI "\fBtuple\fP \fBmake_tuple\fP ()"
.br
.ti -1c
.RI "template<GTEST_1_TYPENAMES_(T) > \fBGTEST_1_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0)"
.br
.ti -1c
.RI "template<GTEST_2_TYPENAMES_(T) > \fBGTEST_2_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_3_TYPENAMES_(T) > \fBGTEST_3_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_4_TYPENAMES_(T) > \fBGTEST_4_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_5_TYPENAMES_(T) > \fBGTEST_5_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_6_TYPENAMES_(T) > \fBGTEST_6_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_7_TYPENAMES_(T) > \fBGTEST_7_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_8_TYPENAMES_(T) > \fBGTEST_8_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_9_TYPENAMES_(T) > \fBGTEST_9_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<GTEST_10_TYPENAMES_(T) > \fBGTEST_10_TUPLE_\fP (T) \fBmake_tuple\fP(const T0 &f0"
.br
.ti -1c
.RI "template<int k, GTEST_10_TYPENAMES_(T) > \fBGTEST_ADD_REF_\fP (\fBGTEST_TUPLE_ELEMENT_\fP(k, \fBGTEST_10_TUPLE_\fP(T))) get(\fBGTEST_10_TUPLE_\fP(T) &t)"
.br
.ti -1c
.RI "template<int k, GTEST_10_TYPENAMES_(T) > \fBGTEST_BY_REF_\fP (\fBGTEST_TUPLE_ELEMENT_\fP(k, \fBGTEST_10_TUPLE_\fP(T))) get(const \fBGTEST_10_TUPLE_\fP(T) &t)"
.br
.ti -1c
.RI "template<GTEST_10_TYPENAMES_(T) , GTEST_10_TYPENAMES_(U) > bool \fBoperator==\fP (const \fBGTEST_10_TUPLE_\fP(T)&t, const \fBGTEST_10_TUPLE_\fP(U)&u)"
.br
.ti -1c
.RI "template<GTEST_10_TYPENAMES_(T) , GTEST_10_TYPENAMES_(U) > bool \fBoperator!=\fP (const \fBGTEST_10_TUPLE_\fP(T)&t, const \fBGTEST_10_TUPLE_\fP(U)&u)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const T1 & \fBf1\fP"
.br
.ti -1c
.RI "const T1 const T2 & \fBf2\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 & \fBf3\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 & \fBf4\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 const T5 & \fBf5\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 const T5 const T6 & \fBf6\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 const T5 const T6 const T7 & \fBf7\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 const T5 const T6 const T7 const T8 & \fBf8\fP"
.br
.ti -1c
.RI "const T1 const T2 const T3 const T4 const T5 const T6 const T7 const T8 const T9 & \fBf9\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<GTEST_10_TYPENAMES_(T) > std::tr1::GTEST_10_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_1_TYPENAMES_(T) > class std::tr1::GTEST_1_TUPLE_ (T)"

.SS "template<GTEST_1_TYPENAMES_(T) > std::tr1::GTEST_1_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_2_TYPENAMES_(T) > class std::tr1::GTEST_2_TUPLE_ (T)"

.SS "template<GTEST_2_TYPENAMES_(T) > std::tr1::GTEST_2_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_3_TYPENAMES_(T) > class std::tr1::GTEST_3_TUPLE_ (T)"

.SS "template<GTEST_3_TYPENAMES_(T) > std::tr1::GTEST_3_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_4_TYPENAMES_(T) > class std::tr1::GTEST_4_TUPLE_ (T)"

.SS "template<GTEST_4_TYPENAMES_(T) > std::tr1::GTEST_4_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_5_TYPENAMES_(T) > class std::tr1::GTEST_5_TUPLE_ (T)"

.SS "template<GTEST_5_TYPENAMES_(T) > std::tr1::GTEST_5_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_6_TYPENAMES_(T) > class std::tr1::GTEST_6_TUPLE_ (T)"

.SS "template<GTEST_6_TYPENAMES_(T) > std::tr1::GTEST_6_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_7_TYPENAMES_(T) > class std::tr1::GTEST_7_TUPLE_ (T)"

.SS "template<GTEST_7_TYPENAMES_(T) > std::tr1::GTEST_7_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_8_TYPENAMES_(T) > class std::tr1::GTEST_8_TUPLE_ (T)"

.SS "template<GTEST_8_TYPENAMES_(T) > std::tr1::GTEST_8_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<GTEST_9_TYPENAMES_(T) > class std::tr1::GTEST_9_TUPLE_ (T)"

.SS "template<GTEST_9_TYPENAMES_(T) > std::tr1::GTEST_9_TUPLE_ (T) const &\fC [inline]\fP"

.SS "template<int k, GTEST_10_TYPENAMES_(T) > std::tr1::GTEST_ADD_REF_ (\fBGTEST_TUPLE_ELEMENT_\fP(k, \fBGTEST_10_TUPLE_\fP(T))) &"

.SS "template<int k, GTEST_10_TYPENAMES_(T) > std::tr1::GTEST_BY_REF_ (\fBGTEST_TUPLE_ELEMENT_\fP(k, \fBGTEST_10_TUPLE_\fP(T))) const &"

.SS "\fBtuple\fP std::tr1::make_tuple ()\fC [inline]\fP"

.SS "template<GTEST_10_TYPENAMES_(T) , GTEST_10_TYPENAMES_(U) > bool std::tr1::operator!= (const \fBGTEST_10_TUPLE_\fP(T)& t, const \fBGTEST_10_TUPLE_\fP(U)& u)\fC [inline]\fP"

.SS "template<GTEST_10_TYPENAMES_(T) , GTEST_10_TYPENAMES_(U) > bool std::tr1::operator== (const \fBGTEST_10_TUPLE_\fP(T)& t, const \fBGTEST_10_TUPLE_\fP(U)& u)\fC [inline]\fP"

.SH "Variable Documentation"
.PP 
.SS "const T1 & std::tr1::f1"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_2_TUPLE_(T)(f0, f1)
.fi
.SS "const T1 const T2 & std::tr1::f2"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_3_TUPLE_(T)(f0, f1, f2)
.fi
.SS "const T1 const T2 const T3 & std::tr1::f3"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_4_TUPLE_(T)(f0, f1, f2, f3)
.fi
.SS "const T1 const T2 const T3 const T4 & std::tr1::f4"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_5_TUPLE_(T)(f0, f1, f2, f3, f4)
.fi
.SS "const T1 const T2 const T3 const T4 const T5 & std::tr1::f5"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_6_TUPLE_(T)(f0, f1, f2, f3, f4, f5)
.fi
.SS "const T1 const T2 const T3 const T4 const T5 const T6 & std::tr1::f6"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_7_TUPLE_(T)(f0, f1, f2, f3, f4, f5, f6)
.fi
.SS "const T1 const T2 const T3 const T4 const T5 const T6 const T7 & std::tr1::f7"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_8_TUPLE_(T)(f0, f1, f2, f3, f4, f5, f6, f7)
.fi
.SS "const T1 const T2 const T3 const T4 const T5 const T6 const T7 const T8 & std::tr1::f8"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_9_TUPLE_(T)(f0, f1, f2, f3, f4, f5, f6, f7, f8)
.fi
.SS "const T1 const T2 const T3 const T4 const T5 const T6 const T7 const T8 const T9& std::tr1::f9"
\fBInitial value:\fP
.PP
.nf
{
  return GTEST_10_TUPLE_(T)(f0, f1, f2, f3, f4, f5, f6, f7, f8, f9)
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Context-Free Grammars from the source code\&.
